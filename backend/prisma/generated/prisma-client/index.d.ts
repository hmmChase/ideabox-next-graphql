// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  idea: (where?: IdeaWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  idea: (where: IdeaWhereUniqueInput) => IdeaPromise;
  ideas: (args?: {
    where?: IdeaWhereInput;
    orderBy?: IdeaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Idea>;
  ideasConnection: (args?: {
    where?: IdeaWhereInput;
    orderBy?: IdeaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IdeaConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createIdea: (data: IdeaCreateInput) => IdeaPromise;
  updateIdea: (args: {
    data: IdeaUpdateInput;
    where: IdeaWhereUniqueInput;
  }) => IdeaPromise;
  updateManyIdeas: (args: {
    data: IdeaUpdateManyMutationInput;
    where?: IdeaWhereInput;
  }) => BatchPayloadPromise;
  upsertIdea: (args: {
    where: IdeaWhereUniqueInput;
    create: IdeaCreateInput;
    update: IdeaUpdateInput;
  }) => IdeaPromise;
  deleteIdea: (where: IdeaWhereUniqueInput) => IdeaPromise;
  deleteManyIdeas: (where?: IdeaWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  idea: (
    where?: IdeaSubscriptionWhereInput
  ) => IdeaSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type IdeaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "idea_ASC"
  | "idea_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface IdeaCreateInput {
  idea: String;
}

export interface IdeaUpdateInput {
  idea?: String;
}

export interface IdeaUpdateManyMutationInput {
  idea?: String;
}

export interface IdeaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  idea?: String;
  idea_not?: String;
  idea_in?: String[] | String;
  idea_not_in?: String[] | String;
  idea_lt?: String;
  idea_lte?: String;
  idea_gt?: String;
  idea_gte?: String;
  idea_contains?: String;
  idea_not_contains?: String;
  idea_starts_with?: String;
  idea_not_starts_with?: String;
  idea_ends_with?: String;
  idea_not_ends_with?: String;
  AND?: IdeaWhereInput[] | IdeaWhereInput;
  OR?: IdeaWhereInput[] | IdeaWhereInput;
  NOT?: IdeaWhereInput[] | IdeaWhereInput;
}

export interface IdeaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IdeaWhereInput;
  AND?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
  OR?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
  NOT?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
}

export type IdeaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateIdea {
  count: Int;
}

export interface AggregateIdeaPromise
  extends Promise<AggregateIdea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIdeaSubscription
  extends Promise<AsyncIterator<AggregateIdea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface IdeaPreviousValues {
  id: ID_Output;
  idea: String;
}

export interface IdeaPreviousValuesPromise
  extends Promise<IdeaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idea: () => Promise<String>;
}

export interface IdeaPreviousValuesSubscription
  extends Promise<AsyncIterator<IdeaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idea: () => Promise<AsyncIterator<String>>;
}

export interface IdeaEdge {
  node: Idea;
  cursor: String;
}

export interface IdeaEdgePromise extends Promise<IdeaEdge>, Fragmentable {
  node: <T = IdeaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IdeaEdgeSubscription
  extends Promise<AsyncIterator<IdeaEdge>>,
    Fragmentable {
  node: <T = IdeaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface IdeaSubscriptionPayload {
  mutation: MutationType;
  node: Idea;
  updatedFields: String[];
  previousValues: IdeaPreviousValues;
}

export interface IdeaSubscriptionPayloadPromise
  extends Promise<IdeaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IdeaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IdeaPreviousValuesPromise>() => T;
}

export interface IdeaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IdeaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IdeaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IdeaPreviousValuesSubscription>() => T;
}

export interface Idea {
  id: ID_Output;
  idea: String;
}

export interface IdeaPromise extends Promise<Idea>, Fragmentable {
  id: () => Promise<ID_Output>;
  idea: () => Promise<String>;
}

export interface IdeaSubscription
  extends Promise<AsyncIterator<Idea>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idea: () => Promise<AsyncIterator<String>>;
}

export interface IdeaConnection {
  pageInfo: PageInfo;
  edges: IdeaEdge[];
}

export interface IdeaConnectionPromise
  extends Promise<IdeaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IdeaEdge>>() => T;
  aggregate: <T = AggregateIdeaPromise>() => T;
}

export interface IdeaConnectionSubscription
  extends Promise<AsyncIterator<IdeaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IdeaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIdeaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Idea",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
