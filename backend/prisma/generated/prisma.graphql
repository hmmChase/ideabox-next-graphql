type AggregateIdea {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Idea {
  id: ID!
  idea: String!
}

type IdeaConnection {
  pageInfo: PageInfo!
  edges: [IdeaEdge]!
  aggregate: AggregateIdea!
}

input IdeaCreateInput {
  idea: String!
}

type IdeaEdge {
  node: Idea!
  cursor: String!
}

enum IdeaOrderByInput {
  id_ASC
  id_DESC
  idea_ASC
  idea_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IdeaPreviousValues {
  id: ID!
  idea: String!
}

type IdeaSubscriptionPayload {
  mutation: MutationType!
  node: Idea
  updatedFields: [String!]
  previousValues: IdeaPreviousValues
}

input IdeaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IdeaWhereInput
  AND: [IdeaSubscriptionWhereInput!]
  OR: [IdeaSubscriptionWhereInput!]
  NOT: [IdeaSubscriptionWhereInput!]
}

input IdeaUpdateInput {
  idea: String
}

input IdeaUpdateManyMutationInput {
  idea: String
}

input IdeaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  idea: String
  idea_not: String
  idea_in: [String!]
  idea_not_in: [String!]
  idea_lt: String
  idea_lte: String
  idea_gt: String
  idea_gte: String
  idea_contains: String
  idea_not_contains: String
  idea_starts_with: String
  idea_not_starts_with: String
  idea_ends_with: String
  idea_not_ends_with: String
  AND: [IdeaWhereInput!]
  OR: [IdeaWhereInput!]
  NOT: [IdeaWhereInput!]
}

input IdeaWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIdea(data: IdeaCreateInput!): Idea!
  updateIdea(data: IdeaUpdateInput!, where: IdeaWhereUniqueInput!): Idea
  updateManyIdeas(data: IdeaUpdateManyMutationInput!, where: IdeaWhereInput): BatchPayload!
  upsertIdea(where: IdeaWhereUniqueInput!, create: IdeaCreateInput!, update: IdeaUpdateInput!): Idea!
  deleteIdea(where: IdeaWhereUniqueInput!): Idea
  deleteManyIdeas(where: IdeaWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  idea(where: IdeaWhereUniqueInput!): Idea
  ideas(where: IdeaWhereInput, orderBy: IdeaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Idea]!
  ideasConnection(where: IdeaWhereInput, orderBy: IdeaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IdeaConnection!
  node(id: ID!): Node
}

type Subscription {
  idea(where: IdeaSubscriptionWhereInput): IdeaSubscriptionPayload
}
